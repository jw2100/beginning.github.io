
序列Sequence：从0开始的索引

python共有六种序列：列表、元组、字符串、Unicode字符串、buffer对象、xrange对象


列表和元组区别：元组不能被修改（元组可用作字典的键）

元组和序列可嵌套： [['a',1], 2, [3, [3,'b']]]

-----------------------------------------------------------------------------
通用操作：索引(indexing)、分片(sllicing)、加、乘、属于、长度、最大、最小

1、索引
	(字符串就是字符组成的序列) g='hello' g[0] = h
	通过索引获取元素，从0开始， 从右往左第一个是-1

2、分片
	num = [1,2,3,5,7,8,9,0]
	num[2:4] = [3,5]
	num[-3:] = [8,9,0] 这种方式访问最后一个  错误：num[-3:0]
	num[:3]  = [1,2,3]
	num[:]   = [.......]
	可以指定步长（默认为1）
	num[0:7:3] = [1,5,9]
	num[::4] = [1,7]
	步长可以是负数：num[::-4] = [0,5]

3、相加：
   [1,2] + [4] = [1,2,4]

4、乘法：
	'Pyt' * 3 = 'PytPytPyt'
	空列表：[]   [0]*10 10个0
	初始化一定长度的空列表  [None]*10  (None是空)

5、属于
	x in 'xyw'  Ture or False

6、其他：
	len()  max()  min()
----------------------------------------------------------------------------------



列表
1、list(var) 所有序列转换为列表，特别是字符串
2、操作：
	赋值
	删除：del num[2]
	分片赋值：name=list('perl');name[1:] = list('ython')--> ['p','y','t'....]
			  不替换插入 num=[1,5] num[1:1] = [2,3]     --> num=[1,2,3,5]
			  批量删除：num=[1,2,3,4,5]  num[1:4] = []  --> num=[1,5]

3、方法：
	lst = [1,3,5,2]
	append() : 追加, lst.append(1)
	count()  : 统计, lst.count(1) = 2
	extend() : 一次性加多个值：lst.extend([1,2]) 
				[extend 比 + 高效，因为extend是原list扩展，+ 是新的]
	index()  : 找索引, lst.index(5) = 2 （匹配的第一个，匹配不到异常）
	insert() : 插入, lst.insert(3,'x') = [1,3,'x', 5]
	pop()    : 移除最后一个：lst.pop()
	remove() : 移除匹配的第一个，匹配不到异常
	reverse(): 反转[返回的迭代器]
	sort()   ：不返回，原位置排序
	sorted() : 返回排序，原数据不变  y=lst.sorted() y=[1,2,3,5] lst=[1,3,5,2]
	[3.0无cmp]cmp()    : 高级排序


------------------------------------------------------------------------------

元组：
	元组是不能修改的列表，用圆括号
	实现一个元素的元组，必须加逗号 a=1, a=(1,)

	tuple把列表转换为元组 tuple([1,2,3]) = (1,2,3)

